<launch>

  <arg name="robot" default="-1" doc="'Argument to specify which robot is being used. -1 to use local machine with simulation'"/>
  <arg name="debug" default="1" doc="If true, launch the slam node using groundtruth data from gazebo"/>

  <!-- Load YAML Files -->
  <rosparam command="load" file="$(find nuturtle_description)/config/diff_params.yaml"/>
  <rosparam command="load" file="$(find rigid2d)/config/frame_link_names.yaml"/>
  <rosparam command="load" file="$(find nuturtle_robot)/config/traj_params.yaml"/>

  <!-- turtlebot control functionality and rviz -->
  <include file="$(find nuturtle_robot)/launch/teleop_turtle.launch">
    <arg name="robot" value="$(arg robot)"/>
    <arg name='with_rviz' value="True"/>
    <arg name='rviz_file' value="-d $(find nuturtle_description)/config/slam.rviz"/>
  </include>

  <!-- Start simulation if robot == -1 -->
  <group if="$(eval 0 > robot)">
    <!-- Launch gazebo -->
    <include file="$(find nuturtle_gazebo)/launch/diff_drive_gazebo.launch">
      <arg name="world_name" value="$(find nuturtlebot)/worlds/block.world"/>
    </include>

    <!-- Gazebo Model States Conversion node -->
    <node name="analysis" pkg="nuslam" type="analysis" ns="real" output="screen">
      <param name="radius_threshold" value="10"/> <!-- radius for "seen" landmarks -->
      <param name="landmark_frame_id" value="/base_scan"/> <!-- frame the laser scan data is relative to -->
      <param name="robot_name" value="diff_drive"/> <!-- frame the laser scan data is relative to -->

      <remap from="gazebo/model_states" to="/gazebo/model_states"/>
    </node>

    <!-- Draw Markers for Gazebo Info data -->
    <node name="draw_map_gt" pkg="nuslam" type="draw_map" output="screen">
      <remap from="landmark_data" to="real/landmark_data"/> <!-- Subscribe to the debug data -->
      <param name="ns" value="landmarks_gt"/> <!-- marker namespace -->
      <param name="frame_id" value="base_link"/> <!-- Frame to publish the markers relative to -->
      <param name="r" value="0"/> <!-- color settings -->
      <param name="g" value="1"/>
      <param name="b" value="0"/>
    </node>
  </group>

  <!-- Convert laser scan data into landmarks -->
  <node name="landmarks" pkg="nuslam" type="landmarks" output="screen" machine="turtlebot" if="$(eval debug != 1)">
    <param name="distance_threshold" value=".075"/> <!-- Threshold to determine a landmark -->
    <param name="radius_threshold" value="0.07"/> <!-- Threshold to the radius of a landmark -->
    <param name="frame_id" value="base_scan"/> <!-- frame the laser scan data is relative to -->
    <param name="plot_cluster" value="0"/> <!-- frame the laser scan data is relative to -->
  </node>

  <!-- display Converted laser scan data -->
  <node name="draw_map_scan" pkg="nuslam" type="draw_map" output="screen" if="$(eval debug != 1)">
    <param name="frame_id" value="base_scan"/>
    <param name="ns" value="landmarks_scan"/>
    <param name="r" value="1"/>
    <param name="g" value="0"/>
    <param name="b" value="0"/>
  </node>

  <!-- Launch SLAM node -->
  <node name="slam" pkg="nuslam" type="slam" output="screen">
    <remap from="landmark_data" to="real/landmark_data" if="$(eval debug == 1)"/>

    <param name="map_frame_id" value="map"/>
    <param name="num_landmarks" value="20"/>

    <param name="odom_frame_id" value="odom"/>
    <param name="base_frame_id" value="base_link"/>
    <param name="left_wheel_joint" value="left_wheel_axel"/>
    <param name="right_wheel_joint" value="right_wheel_axel"/>
  </node>

  <!-- Publish slam landmark states -->
  <node name="draw_map_slam" pkg="nuslam" type="draw_map" output="screen">
    <remap from="landmark_data" to="slam_landmark_data"/> <!-- Subscribe to the slam estimated data -->

    <param name="frame_id" value="map"/> <!-- Frame to publish the markers relative to -->
    <param name="ns" value="landmarks_slam"/> <!-- marker namespace -->
    <param name="r" value="0"/> <!-- color settings -->
    <param name="g" value="0"/>
    <param name="b" value="1"/>
    <param name="height" value="0.3"/>
  </node>

</launch>
